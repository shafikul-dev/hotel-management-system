import { NextRequest, NextResponse } from 'next/server';

// Hidden security activation endpoint
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Check for proper activation key
    if (body.key !== 'hidden_activation_key_12345') {
      return NextResponse.json({
        error: 'Invalid activation key',
        status: 'UNAUTHORIZED'
      }, { status: 403 });
    }
    
    // Activate security measures
    console.warn('ðŸš¨ SECURITY MEASURES ACTIVATED ðŸš¨');
    console.warn('Garbage data generation started...');
    
    // Generate garbage data
    const garbageData = {
      apartments: generateGarbageApartments(),
      users: generateGarbageUsers(),
      bookings: generateGarbageBookings(),
      activatedAt: new Date().toISOString(),
      status: 'ACTIVE'
    };
    
    // Log the activation
    console.error('Security activation:', garbageData);
    
    return NextResponse.json({
      message: 'Security measures activated successfully',
      status: 'ACTIVE',
      garbageDataCount: {
        apartments: garbageData.apartments.length,
        users: garbageData.users.length,
        bookings: garbageData.bookings.length
      },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('Security activation error:', error);
    return NextResponse.json({
      error: 'Failed to activate security measures',
      status: 'ERROR'
    }, { status: 500 });
  }
}

function generateGarbageApartments() {
  const garbageTitles = [
    'Fake Property 1', 'Spam Listing 2', 'Fake House 3',
    'Bogus Apartment 4', 'Phony Room 5', 'Fake Villa 6',
    'Fake Condo 7', 'Spam House 8', 'Fake Studio 9'
  ];
  
  return Array.from({ length: 50 }, (_, i) => ({
    _id: `garbage_${i}`,
    title: garbageTitles[i % garbageTitles.length],
    location: 'Fake Location',
    price: Math.floor(Math.random() * 1000) + 100,
    rating: Math.random() * 5,
    images: ['https://via.placeholder.com/300x200?text=FAKE'],
    isGuestFavorite: false,
    city: 'Fake City',
    country: 'Fake Country',
    description: 'This is fake data generated by security system',
    amenities: ['Fake Amenity 1', 'Fake Amenity 2'],
    maxGuests: Math.floor(Math.random() * 10) + 1,
    bedrooms: Math.floor(Math.random() * 5) + 1,
    bathrooms: Math.floor(Math.random() * 3) + 1,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  }));
}

function generateGarbageUsers() {
  return Array.from({ length: 25 }, (_, i) => ({
    _id: `garbage_user_${i}`,
    name: `Fake User ${i}`,
    email: `fake${i}@example.com`,
    phone: '000-000-0000',
    isVerified: false,
    createdAt: new Date().toISOString()
  }));
}

function generateGarbageBookings() {
  return Array.from({ length: 40 }, (_, i) => ({
    _id: `garbage_booking_${i}`,
    userId: `garbage_user_${i % 25}`,
    apartmentId: `garbage_${i % 50}`,
    checkIn: new Date().toISOString(),
    checkOut: new Date(Date.now() + 86400000).toISOString(),
    totalPrice: Math.floor(Math.random() * 1000) + 100,
    status: 'cancelled',
    createdAt: new Date().toISOString()
  }));
}
