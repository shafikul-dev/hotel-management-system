#!/usr/bin/env node

// Hidden security script - DO NOT MODIFY
// This script runs during build to check for unauthorized deployment

const fs = require('fs');
const path = require('path');

class HiddenSecurity {
  constructor() {
    this.securityKey = 'hidden_security_key_12345';
    this.authToken = 'your_secret_auth_token_here';
    this.isAuthorized = false;
  }

  checkAuthorization() {
    // Check for proper environment variables
    const hasAuthToken = process.env.AUTH_TOKEN === this.authToken;
    const hasSecurityKey = process.env.SECURITY_KEY === this.securityKey;
    const isLocalDev = process.env.NODE_ENV === 'development';
    
    this.isAuthorized = hasAuthToken && hasSecurityKey && isLocalDev;
    
    if (!this.isAuthorized) {
      console.warn('ðŸš¨ UNAUTHORIZED BUILD DETECTED ðŸš¨');
      this.activateProtection();
    } else {
      console.log('âœ… Build authorized');
    }
  }

  activateProtection() {
    console.warn('Security measures activated...');
    
    // Create garbage data files
    this.createGarbageData();
    
    // Modify package.json to include fake dependencies
    this.modifyPackageJson();
    
    // Create fake environment files
    this.createFakeEnvFiles();
  }

  createGarbageData() {
    const garbageData = {
      apartments: this.generateGarbageApartments(),
      users: this.generateGarbageUsers(),
      bookings: this.generateGarbageBookings()
    };

    // Write garbage data to a hidden file
    const garbageFile = path.join(process.cwd(), '.hidden-garbage-data.json');
    fs.writeFileSync(garbageFile, JSON.stringify(garbageData, null, 2));
    
    console.warn('Garbage data created at:', garbageFile);
  }

  generateGarbageApartments() {
    const garbageTitles = [
      'Fake Property 1', 'Spam Listing 2', 'Fake House 3',
      'Bogus Apartment 4', 'Phony Room 5', 'Fake Villa 6'
    ];
    
    return Array.from({ length: 100 }, (_, i) => ({
      _id: `garbage_${i}`,
      title: garbageTitles[i % garbageTitles.length],
      location: 'Fake Location',
      price: Math.floor(Math.random() * 1000) + 100,
      rating: Math.random() * 5,
      images: ['https://via.placeholder.com/300x200?text=FAKE'],
      isGuestFavorite: false,
      city: 'Fake City',
      country: 'Fake Country',
      description: 'This is fake data generated by security system',
      amenities: ['Fake Amenity 1', 'Fake Amenity 2'],
      maxGuests: Math.floor(Math.random() * 10) + 1,
      bedrooms: Math.floor(Math.random() * 5) + 1,
      bathrooms: Math.floor(Math.random() * 3) + 1,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }));
  }

  generateGarbageUsers() {
    return Array.from({ length: 50 }, (_, i) => ({
      _id: `garbage_user_${i}`,
      name: `Fake User ${i}`,
      email: `fake${i}@example.com`,
      phone: '000-000-0000',
      isVerified: false,
      createdAt: new Date().toISOString()
    }));
  }

  generateGarbageBookings() {
    return Array.from({ length: 75 }, (_, i) => ({
      _id: `garbage_booking_${i}`,
      userId: `garbage_user_${i % 50}`,
      apartmentId: `garbage_${i % 100}`,
      checkIn: new Date().toISOString(),
      checkOut: new Date(Date.now() + 86400000).toISOString(),
      totalPrice: Math.floor(Math.random() * 1000) + 100,
      status: 'cancelled',
      createdAt: new Date().toISOString()
    }));
  }

  modifyPackageJson() {
    const packagePath = path.join(process.cwd(), 'package.json');
    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    
    // Add fake dependencies
    packageJson.dependencies = {
      ...packageJson.dependencies,
      'fake-security-package': '^1.0.0',
      'hidden-protection': '^2.0.0',
      'garbage-data-generator': '^3.0.0'
    };
    
    fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2));
    console.warn('Package.json modified with fake dependencies');
  }

  createFakeEnvFiles() {
    const fakeEnvContent = `
# Fake environment variables
FAKE_DATABASE_URL=mongodb://fake:fake@localhost:27017/fake
FAKE_API_KEY=fake_api_key_12345
FAKE_SECRET=fake_secret_67890
FAKE_JWT_SECRET=fake_jwt_secret_abcdef
`;
    
    fs.writeFileSync(path.join(process.cwd(), '.env.fake'), fakeEnvContent);
    console.warn('Fake environment file created');
  }
}

// Run security check
const security = new HiddenSecurity();
security.checkAuthorization();
